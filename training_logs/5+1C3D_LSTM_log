Epoch 1/100
622/622 [==============================] - 2105s 3s/step - loss: 0.8211 - acc: 0.6736 - val_loss: 0.2684 - val_acc: 0.9163
Epoch 2/100
622/622 [==============================] - 2075s 3s/step - loss: 0.2132 - acc: 0.9358 - val_loss: 0.2115 - val_acc: 0.9367
Epoch 3/100
622/622 [==============================] - 2079s 3s/step - loss: 0.1195 - acc: 0.9641 - val_loss: 0.2326 - val_acc: 0.9321
Epoch 4/100
622/622 [==============================] - 2081s 3s/step - loss: 0.0747 - acc: 0.9786 - val_loss: 0.2335 - val_acc: 0.9325
Epoch 5/100
622/622 [==============================] - 2081s 3s/step - loss: 0.0500 - acc: 0.9850 - val_loss: 0.3750 - val_acc: 0.9185
Epoch 6/100
622/622 [==============================] - 2081s 3s/step - loss: 0.0428 - acc: 0.9871 - val_loss: 0.2619 - val_acc: 0.9397
Epoch 7/100
622/622 [==============================] - 2079s 3s/step - loss: 0.0316 - acc: 0.9905 - val_loss: 0.2237 - val_acc: 0.9464
Epoch 8/100
622/622 [==============================] - 2080s 3s/step - loss: 0.0294 - acc: 0.9915 - val_loss: 0.3081 - val_acc: 0.9343
Epoch 9/100
622/622 [==============================] - 2080s 3s/step - loss: 0.0241 - acc: 0.9929 - val_loss: 0.2955 - val_acc: 0.9442
Epoch 10/100
622/622 [==============================] - 2083s 3s/step - loss: 0.0171 - acc: 0.9958 - val_loss: 0.2990 - val_acc: 0.9462
Epoch 11/100
622/622 [==============================] - 2088s 3s/step - loss: 0.0208 - acc: 0.9937 - val_loss: 0.3061 - val_acc: 0.9399
Epoch 12/100
622/622 [==============================] - 2088s 3s/step - loss: 0.0164 - acc: 0.9954 - val_loss: 0.3084 - val_acc: 0.9433
Epoch 13/100
622/622 [==============================] - 2089s 3s/step - loss: 0.0176 - acc: 0.9947 - val_loss: 0.2699 - val_acc: 0.9427
Epoch 14/100
622/622 [==============================] - 2126s 3s/step - loss: 0.0057 - acc: 0.9983 - val_loss: 0.3736 - val_acc: 0.9458
Epoch 15/100
622/622 [==============================] - 2083s 3s/step - loss: 0.0210 - acc: 0.9943 - val_loss: 0.3512 - val_acc: 0.9335

def c3d():

    pre_train = c3d_sports()

    shape = (30,112,112,3)

    model = Sequential()
    model.add(Conv3D(64, 3, activation='relu', padding='same', name='conv1', input_shape=shape))
    model.add(MaxPooling3D(pool_size=(1,2,2), strides=(1,2,2), padding='same', name='pool1'))
    
    model.add(Conv3D(128, 3, activation='relu', padding='same', name='conv2'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool2'))
    
    model.add(Conv3D(256, 3, activation='relu', padding='same', name='conv3a'))
    model.add(Conv3D(256, 3, activation='relu', padding='same', name='conv3b'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool3'))
    
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv4a'))
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv4b'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool4'))
    
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv5a'))
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv5b'))
    model.add(ZeroPadding3D(padding=(0,1,1)))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool5'))
    
    model.add(Reshape((16,512)))

    model.add(Lambda(lambda x: K.l2_normalize(x,axis=-1)))
    model.add(LSTM(512, return_sequences=False,
                   input_shape= (16,512),
                   dropout=0.5))
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(6, activation='softmax'))

    for i in range(0,14,1):
        model.layers[i].set_weights(pre_train.layers[i].get_weights())

    for i in range(0,10,1):    
        model.layers[i].trainable = False

    model.compile(loss='categorical_crossentropy',
                  optimizer=Adam(),
                  metrics=['accuracy'])

    return model