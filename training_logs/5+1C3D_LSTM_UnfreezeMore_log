Epoch 1/100
622/622 [==============================] - 2694s 4s/step - loss: 1.1397 - acc: 0.5163 - val_loss: 0.4797 - val_acc: 
622/622 [==============================] - 2653s 4s/step - loss: 0.2934 - acc: 0.9087 - val_loss: 0.2672 - val_acc: 0.9190
Epoch 3/100
622/622 [==============================] - 2656s 4s/step - loss: 0.1660 - acc: 0.9504 - val_loss: 0.1399 - val_acc: 0.9593
Epoch 4/100
622/622 [==============================] - 2658s 4s/step - loss: 0.1220 - acc: 0.9646 - val_loss: 0.1734 - val_acc: 0.9510
Epoch 5/100
622/622 [==============================] - 2658s 4s/step - loss: 0.0941 - acc: 0.9716 - val_loss: 0.1150 - val_acc: 0.9669


def c3d():

    pre_train = c3d_sports()

    shape = (30,112,112,3)

    model = Sequential()
    model.add(Conv3D(64, 3, activation='relu', padding='same', name='conv1', input_shape=shape))
    model.add(MaxPooling3D(pool_size=(1,2,2), strides=(1,2,2), padding='same', name='pool1'))
    
    model.add(Conv3D(128, 3, activation='relu', padding='same', name='conv2'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool2'))
    
    model.add(Conv3D(256, 3, activation='relu', padding='same', name='conv3a'))
    model.add(Conv3D(256, 3, activation='relu', padding='same', name='conv3b'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool3'))
    
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv4a'))
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv4b'))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool4'))
    
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv5a'))
    model.add(Conv3D(512, 3, activation='relu', padding='same', name='conv5b'))
    model.add(ZeroPadding3D(padding=(0,1,1)))
    model.add(MaxPooling3D(pool_size=(2,2,2), strides=(2,2,2), padding='valid', name='pool5'))
    
    model.add(Reshape((16,512)))

    model.add(Lambda(lambda x: K.l2_normalize(x,axis=-1)))
    model.add(LSTM(512, return_sequences=False,
                   input_shape= (16,512),
                   dropout=0.5))
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(6, activation='softmax'))

    for i in range(0,14,1):
        model.layers[i].set_weights(pre_train.layers[i].get_weights())

    for i in range(0,7,1):    
        model.layers[i].trainable = False

    model.compile(loss='categorical_crossentropy',
                  optimizer=Adam(),
                  metrics=['accuracy'])

    return model
